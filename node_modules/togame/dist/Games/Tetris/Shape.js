"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TetrisShape = void 0;
const Block_1 = require("./Block");
const candidates_1 = require("./candidates");
/**
 * 图形 - 俄罗斯方块
 *
 * @export
 * @class TetrisShape
 * @extends {TetrisBlock}
 */
class TetrisShape extends Block_1.TetrisBlock {
    constructor(options = {}) {
        super(options);
        this.blocks = [];
        Object.assign(this, options);
    }
    /**
     * 生成一个新实例
     *
     * @static
     * @param {Partial<TetrisShape>} [options={}]
     * @return {*}
     * @memberof TetrisShape
     */
    static newShape(options = {}) {
        // 随机个颜色
        let len = candidates_1.COLOR_LIST.length;
        let rndIndex = ~~(Math.random() * len); // 随即个索引
        const color = candidates_1.COLOR_LIST[rndIndex]; // 随即出颜色
        // 随机个形状
        len = candidates_1.SHAPE_STRUCTS.length;
        rndIndex = ~~(Math.random() * len);
        const shapeTuple = candidates_1.SHAPE_STRUCTS[rndIndex];
        // 生成 blocks
        const blocks = [];
        for (let x = 0; x < 4; x++) {
            for (let y = 0; y < 4; y++) {
                if (shapeTuple[x][y]) {
                    blocks.push(new Block_1.TetrisBlock({ x, y, color }));
                }
            }
        }
        return new TetrisShape(Object.assign({ color,
            blocks }, options));
    }
    clone() {
        const shape = new TetrisShape(this);
        shape.blocks = this.blocks.map(b => b.clone());
        return shape;
    }
    /**
     * 旋转
     *
     * @return {*}
     * @memberof TetrisShape
     */
    rotate() {
        const rx0 = 1.5;
        const ry0 = 1.5;
        const func = function (x, y) {
            const x0 = rx0 + ry0 - y;
            const y0 = ry0 - rx0 + x;
            return [x0, y0];
        };
        this.blocks.forEach(item => {
            const tuple = func(item.x, item.y);
            const x = tuple[0];
            const y = tuple[1];
            item.offset({
                x: x - item.x,
                y: y - item.y
            });
        });
        return this;
    }
}
exports.TetrisShape = TetrisShape;
