// Copyright (c) 2017 SkilStak, Inc.

const path = require('path')
const fs = require('fs')
const os = require('os')
const rl = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
})

let credits = `
The story engine behind this game was created by ...

           [0;31m        __   .__.__            __          __
           [0;31m  _____|  | _|__|  |   _______/  |______  |  | __
           [0;31m /  ___/  |/ /  |  |  /  ___/\\   __\\__  \\ |  |/ /
           [0;31m \\___ \\|    <|  |  |__\\___ \\  |  |  / __ \\|    <
           [0;31m/____  >__|_ \\__|____/____  > |__| (____  /__|_ \\[1;37m_______[0m
           [0;31m     \\/     \\/            \\/            \\/     \\/[1;37m______/[0m
                                        [1;37mCoding Arts[0m
`

let copyright = `
Copyright (c) 2017 SkilStak, Inc.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation and/or
   other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
`

//=============================================================================

let parts = {}
let current = ""
let previous = ""

let actions = {}
actions.also = {}

let data = {
  parts: {},
  current: '',
  previous: '',
  'name': 'friend'
}

let isWindows = process.platform === 'win32'
let isMac = process.platform === 'darwin'
let isLinux = process.platform === 'linux'
let isBSD = process.platform === 'freebsd'
let isPosix = ! isWindows

class Cache {
  
  constructor() {
    this.name = '.' + path.basename(__filename,'.js')
    this.path = path.join(os.homedir(),this.name)
    this.modpath = path.dirname(process.mainModule.filename)
    this.id = path.basename(this.modpath)
    this.data = path.join(this.path, this.id + '.json')
    this.make()
  }

  make() {
    if (!fs.existsSync(this.path)) fs.mkdirSync(this.path)
  }

  save(data) {
    fs.writeFileSync(this.data, JSON.stringify(data))
  }

  load() {
    if (!fs.existsSync(this.data)) return {}
    let text = fs.readFileSync(this.data)
    if (text) {
        return JSON.parse(text)
    }
  }

  remove() {
    fs.unlinkSync(this.data)
  }

}

cache = new Cache() // singleton
const save = () => cache.save(data)
const load = () => cache.load()

//=============================================================================

if (process.argv.pop() === 'reset') {
  cache.remove()
  process.exit(0)
}

//=============================================================================

class Part {
  constructor(name) {
    this.name = validName(name)
    parts[this.name] = this
  }
}

//=============================================================================

const crunch = text => {
  return text.toLowerCase().replace(/[\W_]+/g,'');
}

class Event {
  constructor() {
    this.parts = parts
    this.data = data
    this.previous = previous
    this.current = current
    this.theme = theme
    this.cache = cache
  }
}

class InputEvent extends Event {

  constructor(line) {
    super()
    this.line = line.trim()
    this.empty = !Boolean(this.line)
    this.lower = this.line.toLowerCase()
    this.crunched = crunch(line)
    this.yes = InputEvent.Yes.indexOf(this.lower) >= 0
    this.no = InputEvent.No.indexOf(this.lower) >= 0
    this.action = this.actionFor(this)
  }

  handle() {
    if (!this.action) return
    let rv = this.action.handle(this)
    if (rv) tell(rv)
  }

  contains(...these) {
    for (let str of these) {
      if (this.lower.indexOf(str)>=0) return true
    }
    return false
  }

  matches(...these) {
    for (let x of these) {
      if (this.lower.matches(x)) return true
      return false
    }
  }

  actionFor(e) {
    for (let name in actions) {
      let a = actions[name]
      if (e.lower === name.toLowerCase()) return a
      if (a.also) {
        if (a.also instanceof Array) {
          for (let o in a.also) {
            if (o === e.lower) return a
          }
        } else {
          if (e.lower.match(a.also)) return a
        }
      }
    }
  }

}

InputEvent.Yes = ['yes','y','yep','yeppers','yeah','uhun','yess',
  'affirmative','of course','obviously']

InputEvent.No = ['no','nope','n','no way','obviously not',
  'of course not','nien','nyet']

//=============================================================================

class ThemePrompt {}
class ThemeInput {}
class ThemeTell {}
class ThemeMessages {}

class Theme {
  constructor() {
    this.prompt = new ThemePrompt()
    this.input = new ThemeInput()
    this.tell = new ThemeTell()
    this.msgs = new ThemeMessages()
  }
}

let theme = new Theme()

const setDefaultTheme = () => {
  theme.prompt.text = '--> '
  theme.tell.wrap = 70
  if (process.stdout.columns && process.stdout.columns < 70) {
    theme.tell.wrap = process.stdout.columns
  }
  theme.msgs.nopart = `I'm sorry. The author has not written that part yet`
  theme.msgs.bye = `Sorry to see you go, {name}. See you soon.`
  theme.msgs.nostart = `It appears the author has not added the required 'start' part.`
  theme.msgs.restart = `Do you really want to delete your data and restart?`
  rl.setPrompt(theme.prompt.text)
}

//=============================================================================

const clear = () => {
  if (!isWindows) console.log('\033[H\033[2J')
}

String.prototype.format = function () {
    let str = this.toString();
    if (arguments.length) {
      let args
      switch (typeof arguments[0]) {
        case 'string':
        case 'number':
          args = Array.prototype.slice.call(arguments)
          break
        default:
          args = arguments[0]
      }
      for (let key in args) {
        let re = new RegExp(`{${key}}`,'g')
        str = str.replace(re, args[key])
      }
    }
    return str
}

const tells = what => {
  switch (typeof what) {
    case 'function':
      e = new Event()
      what = what(e)
    case 'string':
      what = what.format(data)
      what = what.replace(/\s+/mg,' ').trim()
      let re = new RegExp(`.{1,${theme.tell.wrap}}(\\s|$)`,'g')
      what =  what.match(re).join('\n')
  }
  return what
}

const tell = what => {
  console.log(`${tells(what)}\n`)
}

const show = what => {
  if (typeof what === 'string') {
    what = what.trim()
  }
  console.log(what)
}

const quit = () => {
  tell(theme.msgs.bye)
  save()
  process.exit(0)
}

//=============================================================================

const leave = p => {
  if (p.onleave) {
    let e = new Event()
    switch (typeof p.onleave) {
      case 'function':
        let rv = p.onleave(e)
        if (rv) tell(rv)
        break
      case 'string':
        tell(p.onleave)
        break
    }
  }
}


const first = p => {
  if (p.onfirst) {
    let e = new Event()
    switch (typeof p.onfirst) {
      case 'function':
        let rv = p.onfirst(e)
        if (rv) tell(rv)
        break
      case 'string':
        tell(p.onfirst)
        break
    }
  }
}

const enter = p => {
  if (p.onenter) {
    let e = new Event()
    switch (typeof p.onenter) {
      case 'function':
        let rv = p.onenter(e)
        if (rv) tell(rv)
        break
      case 'string':
        tell(p.onenter)
        break
    }
  }
}

const initDataFor = p => {
  let dp = data.parts[p.name]
  if (!dp) dp = data.parts[p.name] = {}
  dp.seen = true
  return dp
}

const validName = name => {
  let rx = /^[\S-.]+$/
  if (!name || !name.match(rx)) {
    throw new Error(`Invalid name '${name}' (must match ${rx})`)
  }
  return name.toLowerCase()
}

//=============================================================================

// TODO: add a generic help action

class Action {

  constructor(name) {
    this.name = validName(name)
    this.also = []
    this.handle = e => `Undefined method for action: ${this.name}`
    actions[this.name] = this
  }
}

let a

a = new Action('data')
a.handle = e => show(data)

a = new Action('clear')
a.handle = e => clear()

a = new Action('quit')
a.handle = e => quit()
a.also = ['good bye','quit','so long', 'adios','goodbye', 'make it stop']

a = new Action('restart')
a.handle = e => go('restart')
a.also = /^(restart|start\s+over|respawn)/

a = new Action('back')
a.handle = e => go(e.previous)
a.also = ['previous','prev']

a = new Action('copyright')
a.handle = e => show(copyright)
a.also = ['license','legal','copying','copyleft']

a = new Action('credits')
a.handle = e => show(credits)
a.also = /^(author|creator|attrib|developer|team|cred)/

//=============================================================================

rl.on('line', text => {
  let e = new InputEvent(text)
  let p = parts[current]
  if (p && p.onany) {
    switch (typeof p.onany) {
      case 'function':
        let rv = p.onany(e)
        if (rv) go(rv)
        break
      case 'string':
        go(p.onany)
    }
  } else if (e.action) {
    e.handle()
  } else if (p && p.oninput) {
      switch (typeof p.oninput){
        case 'function':
          let rv = p.oninput(e)
          if (rv) go(rv)
          break
        case 'string':
          go(p.oninput)
      }
  }
  rl.prompt()
})

rl.on('SIGINT', ()=>{quit()})
rl.on('SIGTSTP', ()=>{quit()})

//=============================================================================

const update = () => {
  let p = parts[current]
  if (!p) throw new Error('No current part defined.')
  if (previous) {
    let prevpart = parts[previous]
    data.previous = previous
    leave(prevpart)
  }
  data.current = current
  let dp = data.parts[p.name]
  if (!dp) {
    initDataFor(p)
    if (p.onfirst) first(p)
    else enter(p)
  } else {
    if (!dp.seen && p.onfirst) first(p)
    else enter(p)
  }
  rl.prompt()
}

const go = name => {
  name = name.toLowerCase()
  if (name === current) return
  if (!parts[name]) {
    tell(`${theme.msgs.nopart} (${name}).`)
    return
  }
  previous = current
  current = name
  save()
  update()
}

//=============================================================================

/*
TODO: need a s.tag('blah'[,value]) function that adds a simple tag with optional
value to the current part. The s.tagged('blah') will return that value for
use in conditions.
*/

//=============================================================================

/*
TODO: need to implement an items subengine:

Should have a default action for take/get/pick up for any items listed in
a given parts 'items' list. Take should have a configurable list of synonyms
(like actions)

Each 'item' should have many synonyms (like actions) that can be used by
the player to take or drop the item by name in a part.

Initial items are listed by Initial cap name in the items subdirectory
and loaded into s.items for general reference (like parts or actions).

All items must be unique. Multiples of a given type of item can vary the
name slightly with an ending number.

*/

//=============================================================================

/*
TODO: need a 'verbs' and 'pred'
*/

//=============================================================================

/*
TODO: take an array of actions

p.oninput = {
  '/^something/': 
}

*/

//=============================================================================

let p

p = new Part('start')

p.onenter = e => {
  tell(theme.msgs.nostart)
  process.exit(1)
}

//--------------------------------

p = new Part('restart')

p.onenter = e => theme.msgs.restart

p.oninput = e => {
  if (e.yes) {
    cache.remove()
    process.exit(0)
  } else {
    return previous
  }
}

//=============================================================================

const start = (part='start') => {
  setDefaultTheme()
  clear()
  let d = cache.load()
  if (d.current) {
    data = d
    current = data.current
    previous = data.previous
    update()
  } else {
    go(part)
  }
}

module.exports = {
    Part, Action,
    start, go, tell, tells, show,
    isWindows, isMac, isLinux, isBSD, isPosix
}

